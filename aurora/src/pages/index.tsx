import Head from 'next/head';
import { useEffect, useRef } from 'react';
import {
    About,
    Contact,
    Experience,
    LandingPage,
    Work,
} from '../components/index';
import config from '../config.json';
import {
    loadLocalData,
    mergeGitProjectData,
    ProjectInterface,
    ProjectJsonInterface,
    WorkProps,
} from '../lib/load-data';
import {changeToastValue, setCurrentPage} from '../state/appSlice';
import { RootState, useAppDispatch, useAppSelector } from '../state/store';
import styles from '../styles/Home.module.css';
import {Toast} from "../components/util";

export default function Home({
    projects,
    techTypes,
}: {
    projects: ProjectInterface[];
    techTypes: Iterable<readonly [string, string]>;
}) {
    const workProps: WorkProps = {
        projects,
        techTypes: new Map<string, string>(techTypes),
    };

    const isToastShown: boolean = useAppSelector(
        (state: RootState) => state.counter.isToastShown
    );
    const dispatch = useAppDispatch();
    const currentPage = useAppSelector((state: RootState) => state.counter.currentPage);

    useEffect(() => {
        if (isToastShown) {
            setTimeout(() => {
                dispatch(changeToastValue());
            }, 3000);
        }
    }, [isToastShown]);

    const aboutRef = useRef<HTMLDivElement>(null)
    const experienceRef = useRef<HTMLDivElement>(null)
    const contactRef = useRef<HTMLDivElement>(null)
    const landingRef = useRef<HTMLDivElement>(null)
    const projectRef = useRef<HTMLDivElement>(null)

    useEffect(() => {
        if (!aboutRef.current || !experienceRef.current) return;
        if (!landingRef.current || !contactRef.current) return;
        if (!projectRef.current) return;


        const observer = new IntersectionObserver((entries) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    dispatch(setCurrentPage(entry.target.id))
                }
            });
        });
           observer.observe(aboutRef.current);
         observer.observe(experienceRef.current);
        observer.observe(contactRef.current);
        observer.observe(landingRef.current);
        observer.observe(projectRef.current);


    }, [aboutRef, experienceRef, dispatch]);

    return (
        <div className={styles.container}>
            <Head>
                <title>Aurora </title>
                <meta
                    name="description"
                    content="Generated by create next app, made by FO"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={styles.main}>
                {isToastShown && <Toast message="Added to clipboard" />}
                <LandingPage ref={landingRef} />
                <About ref={aboutRef} />
                <Experience ref={experienceRef} />
                <Work workProps={workProps} ref={projectRef} />
                <Contact ref={contactRef} />
            </main>
        </div>
    );
}

export async function getStaticProps() {
    const localJsonData: { projects: ProjectJsonInterface[] } =
        await loadLocalData();
    const projects = await mergeGitProjectData(
        localJsonData.projects,
        process.env.GITHUB_TOKEN
    );

    const techTypeList: string[][] = config.TECH_TYPES;

    return {
        props: {
            projects: projects,
            techTypes: techTypeList,
        },
        revalidate: process.env.REVALIDATE_VALUE,
    };
}
