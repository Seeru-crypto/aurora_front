import Head from "next/head";
import { useEffect, useRef } from "react";
import About from "../components/about/About";
import Contact from "../components/contact/Contact";
import Experience from "../components/experience/Experience";
import LandingPage from "../components/landing/LandingPage";
import Work from "../components/work/Work";
import config from "../config.json";
import {
  loadLocalData,
  mergeGitProjectData,
  ProjectInterface,
  ProjectJsonInterface,
  WorkProps,
} from "../services/load-data";
import styles from "../styles/Home.module.css";

export default function Home({
  projects,
  techTypes,
}: {
  projects: ProjectInterface[];
  techTypes: Iterable<readonly [string, string]>;
}) {
  const workProps: WorkProps = {
    projects,
    techTypes: new Map<string, string>(techTypes),
  };

  const aboutRef = useRef();

  useEffect(() => {
    const observer = new IntersectionObserver((entries) => {
      const entry = entries[0];
      console.log(entry);
      if (entry.isIntersecting) {
        console.log("it works");
      }
    });

    if (aboutRef.current) {
      observer.observe(aboutRef.current);
    }
  }, [aboutRef]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Aurora </title>
        <meta
          name="description"
          content="Generated by create next app, made by FO"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <LandingPage />
        <div ref={aboutRef}>
          <About />
        </div>

        <Experience />
        <Work workProps={workProps} />
        <Contact />
      </main>
    </div>
  );
}

export async function getStaticProps() {
  const localJsonData: { projects: ProjectJsonInterface[] } =
    await loadLocalData();
  const projects = await mergeGitProjectData(
    localJsonData.projects,
    process.env.GITHUB_TOKEN
  );

  const techTypeList: string[][] = config.TECH_TYPES;

  return {
    props: {
      projects: projects,
      techTypes: techTypeList,
    },
    revalidate: process.env.REVALIDATE_VALUE,
  };
}
