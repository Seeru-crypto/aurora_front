import Head from 'next/head';
import { useEffect, useRef } from 'react';
import ContactSection from '../components/Contact/ContactSection';
import ExperienceSection from '../components/Experience/ExperienceSection';
import HeroSection from '../components/Hero/HeroSection';
import Toast from '../components/util/Toast';
import ShowcaseSection from '../components/Showcase/ShowcaseSection';
import config from '../config.json';
import {
  loadLocalData,
  mergeGitProjectData,
  ProjectInterface,
  ProjectJsonInterface,
  WorkProps,
} from '../services/load-data';
import { toggleToastVisibility } from '../state/appSlice';
import { RootState, useAppDispatch, useAppSelector } from '../state/store';

export default function Home({
  projects,
  techTypes,
}: {
  projects: ProjectInterface[];
  techTypes: Iterable<readonly [string, string]>;
}) {
  const workProps: WorkProps = {
    projects,
    techTypes: new Map<string, string>(techTypes),
  };

  const isToastShown: boolean = useAppSelector((state: RootState) => state.app.isToastShown);
  const dispatch = useAppDispatch();

  useEffect(() => {
    if (isToastShown) {
      setTimeout(() => {
        dispatch(toggleToastVisibility());
      }, 3000);
    }
  }, [dispatch, isToastShown]);

  const aboutRef = useRef(null);

  useEffect(() => {
    const observer = new IntersectionObserver((entries) => {
      const entry = entries[0];
      console.log(entry);
      if (entry.isIntersecting) {
        console.log('it works');
      }
    });

    if (aboutRef.current) {
      observer.observe(aboutRef.current);
    }
  }, [aboutRef]);

  return (
    <>
      <Head>
        <title>Aurora </title>
        <meta name="description" content="Generated by create next app, made by FO" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="" />
        <link
          href="https://fonts.googleapis.com/css2?family=IBM+Plex+Mono&family=Montserrat:wght@400;700&display=swap"
          rel="stylesheet"
        />
      </Head>
      {isToastShown && <Toast />}
      <HeroSection />
      <ExperienceSection />
      <ShowcaseSection workProps={workProps} />
      <ContactSection />
    </>
  );
}

export async function getStaticProps() {
  const localJsonData: { projects: ProjectJsonInterface[] } = await loadLocalData();
  const projects = await mergeGitProjectData(localJsonData.projects, process.env.GITHUB_TOKEN);

  const techTypeList: string[][] = config.TECH_TYPES;

  return {
    props: {
      projects: projects,
      techTypes: techTypeList,
    },
    revalidate: process.env.REVALIDATE_VALUE,
  };
}
